import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { ApiServiceService } from '../Service/api-service.service';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-calendar',
  standalone: false,
  templateUrl: './calendar.component.html',
  styleUrls: ['./calendar.component.css']
})
export class CalendarComponent implements OnInit {
  @Input() selectedDate: string | null = null; // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å input[type="date"]
  @Output() dateSelected = new EventEmitter<string>(); // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
  currentDate = new Date();
  days: { date: Date; isToday: boolean; isBooked: boolean }[] = [];
  bookedDates: string[] = ["2025-03-10", "2025-03-15", "2025-03-20"];
  showCalendar = true; 
  minDate = new Date(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
  disabledDates: string[] = [];
  isInvalidDate: boolean = false;

  constructor(private apiService:ApiServiceService){
    this.updateCalendar();
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(0, 0, 0, 0); //‡πÉ‡∏´‡πâ minDate ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ ‡πÄ‡∏ß‡∏•‡∏≤ 00:00:00 (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô TimeZone Issue)
    this.minDate = tomorrow;
   
  }

  ngOnInit(): void {
    this.apiService.getOrderReport().subscribe((response: any) => {
      this.disabledDates = response.data.map((order: any) =>
        order.eventdate.split('T')[0] // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ YYYY-MM-DD
      );
      console.log('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:', this.disabledDates);
    });
  }


  updateCalendar() {
    const currentMonth = this.currentDate.getMonth();
    const currentYear = this.currentDate.getFullYear();
    const firstDay = new Date(currentYear, currentMonth, 1);
    const lastDay = new Date(currentYear, currentMonth + 1, 0);
    const totalDays = lastDay.getDate();
    const firstDayIndex = firstDay.getDay();

    this.days = [];
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏ñ‡∏ß
    for (let i = 0; i < firstDayIndex; i++) {
      const prevDate = new Date(currentYear, currentMonth, -i);
      this.days.unshift({ date: prevDate, isToday: false, isBooked: false });
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    for (let i = 1; i <= totalDays; i++) {
      const date = new Date(currentYear, currentMonth, i);
      const dateString = date.toISOString().split('T')[0];
      const isToday = date.toDateString() === new Date().toDateString();
      const isBooked = this.bookedDates.includes(dateString);
  
      this.days.push({ date, isToday, isBooked });
    }
  }

  changeMonth(direction: number) {
    this.currentDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() + direction, 1);
    this.updateCalendar();
  }
  
  selectDate(date: Date) {
    console.log("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:", date);// ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Local Date ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô UTC

    if (date < this.minDate) {
      console.warn("üö® ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ!");
      return;
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏à‡∏≤‡∏Å API ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const dateString = date.toISOString().split('T')[0];
  if (this.disabledDates.includes(dateString)) {
    console.warn("üö® ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß!");
    Swal.fire({
      title: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ",
      icon: "error",
      text: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô",
    }).then(() => console.log("Alert ‡∏ñ‡∏π‡∏Å‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏•‡πâ‡∏ß!"));
    return; // ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å
  }

// ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô minDate
if (date.getTime() < this.minDate.getTime()) {
  console.warn("üö® ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ!");
  Swal.fire({
    title: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ",
    icon: "warning",
    text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ",
  }).then(() => console.log("Alert ‡∏ñ‡∏π‡∏Å‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏•‡πâ‡∏ß!"));

  return; // ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
}

    const localDate = new Date(date.getTime() - date.getTimezoneOffset() * 60000);// ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô "YYYY-MM-DD" ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô UTC
    this.selectedDate = localDate.toISOString().split('T')[0];
    console.log("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:", this.selectedDate);
    this.dateSelected.emit(this.selectedDate); // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÉ‡∏´‡πâ input[type="date"]
    this.showCalendar = false; // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
  }
  
  toggleCalendar() {
    this.showCalendar = true;
  }
}
